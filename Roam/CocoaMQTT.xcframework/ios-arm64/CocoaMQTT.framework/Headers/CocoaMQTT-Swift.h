#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef COCOAMQTT_SWIFT_H
#define COCOAMQTT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import MqttCocoaAsyncSocket;
@import ObjectiveC;
@import Security;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CocoaMQTT",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// MQTT Client
/// note:
/// MGCDAsyncSocket need delegate to extend NSObject
SWIFT_CLASS("_TtC9CocoaMQTT9CocoaMQTT")
@interface CocoaMQTT : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// MQTT Client
/// note:
/// MGCDAsyncSocket need delegate to extend NSObject
SWIFT_CLASS("_TtC9CocoaMQTT10CocoaMQTT5")
@interface CocoaMQTT5 : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





enum CocoaMQTTCONNACKReasonCode : uint8_t;
@class MqttDecodeConnAck;
@class CocoaMQTT5Message;
@class MqttDecodePubAck;
@class MqttDecodePubRec;
@class MqttDecodePublish;
@class NSDictionary;
@class NSString;
@class MqttDecodeSubAck;
@class MqttDecodeUnsubAck;
enum CocoaMQTTDISCONNECTReasonCode : uint8_t;
enum CocoaMQTTAUTHReasonCode : uint8_t;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class MqttDecodePubComp;
enum CocoaMQTTConnState : uint8_t;

/// CocoaMQTT5 Delegate
SWIFT_PROTOCOL("_TtP9CocoaMQTT18CocoaMQTT5Delegate_")
@protocol CocoaMQTT5Delegate
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didConnectAck:(enum CocoaMQTTCONNACKReasonCode)ack connAckData:(MqttDecodeConnAck * _Nullable)connAckData;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didPublishMessage:(CocoaMQTT5Message * _Nonnull)message id:(uint16_t)id;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didPublishAck:(uint16_t)id pubAckData:(MqttDecodePubAck * _Nullable)pubAckData;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didPublishRec:(uint16_t)id pubRecData:(MqttDecodePubRec * _Nullable)pubRecData;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didReceiveMessage:(CocoaMQTT5Message * _Nonnull)message id:(uint16_t)id publishData:(MqttDecodePublish * _Nullable)publishData;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didSubscribeTopics:(NSDictionary * _Nonnull)success failed:(NSArray<NSString *> * _Nonnull)failed subAckData:(MqttDecodeSubAck * _Nullable)subAckData;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didUnsubscribeTopics:(NSArray<NSString *> * _Nonnull)topics unsubAckData:(MqttDecodeUnsubAck * _Nullable)unsubAckData;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didReceiveDisconnectReasonCode:(enum CocoaMQTTDISCONNECTReasonCode)reasonCode;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didReceiveAuthReasonCode:(enum CocoaMQTTAUTHReasonCode)reasonCode;
///
- (void)mqtt5DidPing:(CocoaMQTT5 * _Nonnull)mqtt5;
///
- (void)mqtt5DidReceivePong:(CocoaMQTT5 * _Nonnull)mqtt5;
///
- (void)mqtt5DidDisconnect:(CocoaMQTT5 * _Nonnull)mqtt5 withError:(NSError * _Nullable)err;
@optional
/// Manually validate SSL/TLS server certificate.
/// This method will be called if enable  <code>allowUntrustCACertificate</code>
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didReceive:(SecTrustRef _Nonnull)trust completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)mqtt5UrlSession:(CocoaMQTT5 * _Nonnull)mqtt didReceiveTrust:(SecTrustRef _Nonnull)trust didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didPublishComplete:(uint16_t)id pubCompData:(MqttDecodePubComp * _Nullable)pubCompData;
///
- (void)mqtt5:(CocoaMQTT5 * _Nonnull)mqtt5 didStateChangeTo:(enum CocoaMQTTConnState)state;
@end


/// MQTT Message
SWIFT_CLASS("_TtC9CocoaMQTT17CocoaMQTT5Message")
@interface CocoaMQTT5Message : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface CocoaMQTT5Message (SWIFT_EXTENSION(CocoaMQTT))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM(uint8_t, CocoaMQTTAUTHReasonCode, closed) {
  CocoaMQTTAUTHReasonCodeSuccess = 0x00,
  CocoaMQTTAUTHReasonCodeContinueAuthentication = 0x18,
  CocoaMQTTAUTHReasonCodeReAuthenticate = 0x19,
};

typedef SWIFT_ENUM(uint8_t, CocoaMQTTCONNACKReasonCode, closed) {
  CocoaMQTTCONNACKReasonCodeSuccess = 0x00,
  CocoaMQTTCONNACKReasonCodeUnspecifiedError = 0x80,
  CocoaMQTTCONNACKReasonCodeMalformedPacket = 0x81,
  CocoaMQTTCONNACKReasonCodeProtocolError = 0x82,
  CocoaMQTTCONNACKReasonCodeImplementationSpecificError = 0x83,
  CocoaMQTTCONNACKReasonCodeUnsupportedProtocolVersion = 0x84,
  CocoaMQTTCONNACKReasonCodeClientIdentifierNotValid = 0x85,
  CocoaMQTTCONNACKReasonCodeBadUsernameOrPassword = 0x86,
  CocoaMQTTCONNACKReasonCodeNotAuthorized = 0x87,
  CocoaMQTTCONNACKReasonCodeServerUnavailable = 0x88,
  CocoaMQTTCONNACKReasonCodeServerBusy = 0x89,
  CocoaMQTTCONNACKReasonCodeBanned = 0x8A,
  CocoaMQTTCONNACKReasonCodeBadAuthenticationMethod = 0x8C,
  CocoaMQTTCONNACKReasonCodeTopicNameInvalid = 0x90,
  CocoaMQTTCONNACKReasonCodePacketTooLarge = 0x95,
  CocoaMQTTCONNACKReasonCodeQuotaExceeded = 0x97,
  CocoaMQTTCONNACKReasonCodePayloadFormatInvalid = 0x99,
  CocoaMQTTCONNACKReasonCodeRetainNotSupported = 0x9A,
  CocoaMQTTCONNACKReasonCodeQosNotSupported = 0x9B,
  CocoaMQTTCONNACKReasonCodeUseAnotherServer = 0x9C,
  CocoaMQTTCONNACKReasonCodeServerMoved = 0x9D,
  CocoaMQTTCONNACKReasonCodeConnectionRateExceeded = 0x9F,
};

/// Conn Ack
typedef SWIFT_ENUM(uint8_t, CocoaMQTTConnAck, closed) {
  CocoaMQTTConnAckAccept = 0,
  CocoaMQTTConnAckUnacceptableProtocolVersion = 1,
  CocoaMQTTConnAckIdentifierRejected = 2,
  CocoaMQTTConnAckServerUnavailable = 3,
  CocoaMQTTConnAckBadUsernameOrPassword = 4,
  CocoaMQTTConnAckNotAuthorized = 5,
  CocoaMQTTConnAckReserved = 6,
};

/// Connection State
typedef SWIFT_ENUM(uint8_t, CocoaMQTTConnState, closed) {
  CocoaMQTTConnStateDisconnected = 0,
  CocoaMQTTConnStateConnecting = 1,
  CocoaMQTTConnStateConnected = 2,
};

typedef SWIFT_ENUM(uint8_t, CocoaMQTTDISCONNECTReasonCode, closed) {
  CocoaMQTTDISCONNECTReasonCodeNormalDisconnection = 0x00,
  CocoaMQTTDISCONNECTReasonCodeDisconnectWithWillMessage = 0x04,
  CocoaMQTTDISCONNECTReasonCodeUnspecifiedError = 0x80,
  CocoaMQTTDISCONNECTReasonCodeMalformedPacket = 0x81,
  CocoaMQTTDISCONNECTReasonCodeProtocolError = 0x82,
  CocoaMQTTDISCONNECTReasonCodeImplementationSpecificError = 0x83,
  CocoaMQTTDISCONNECTReasonCodeNotAuthorized = 0x87,
  CocoaMQTTDISCONNECTReasonCodeServerBusy = 0x89,
  CocoaMQTTDISCONNECTReasonCodeServerShuttingDown = 0x8B,
  CocoaMQTTDISCONNECTReasonCodeKeepAliveTimeout = 0x8D,
  CocoaMQTTDISCONNECTReasonCodeSessionTakenOver = 0x8E,
  CocoaMQTTDISCONNECTReasonCodeTopicFilterInvalid = 0x8F,
  CocoaMQTTDISCONNECTReasonCodeTopicNameInvalid = 0x90,
  CocoaMQTTDISCONNECTReasonCodeReceiveMaximumExceeded = 0x93,
  CocoaMQTTDISCONNECTReasonCodeTopicAliasInvalid = 0x94,
  CocoaMQTTDISCONNECTReasonCodePacketTooLarge = 0x95,
  CocoaMQTTDISCONNECTReasonCodeMessageRateTooHigh = 0x96,
  CocoaMQTTDISCONNECTReasonCodeQuotaExceeded = 0x97,
  CocoaMQTTDISCONNECTReasonCodeAdministrativeAction = 0x98,
  CocoaMQTTDISCONNECTReasonCodePayloadFormatInvalid = 0x99,
  CocoaMQTTDISCONNECTReasonCodeRetainNotSupported = 0x9A,
  CocoaMQTTDISCONNECTReasonCodeQosNotSupported = 0x9B,
  CocoaMQTTDISCONNECTReasonCodeUseAnotherServer = 0x9C,
  CocoaMQTTDISCONNECTReasonCodeServerMoved = 0x9D,
  CocoaMQTTDISCONNECTReasonCodeSharedSubscriptionsNotSupported = 0x9E,
  CocoaMQTTDISCONNECTReasonCodeConnectionRateExceeded = 0x9F,
  CocoaMQTTDISCONNECTReasonCodeMaximumConnectTime = 0xA0,
  CocoaMQTTDISCONNECTReasonCodeSubscriptionIdentifiersNotSupported = 0xA1,
  CocoaMQTTDISCONNECTReasonCodeWildcardSubscriptionsNotSupported = 0xA2,
};

@class CocoaMQTTMessage;

/// CocoaMQTT Delegate
SWIFT_PROTOCOL("_TtP9CocoaMQTT17CocoaMQTTDelegate_")
@protocol CocoaMQTTDelegate
///
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didConnectAck:(enum CocoaMQTTConnAck)ack;
///
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
///
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishAck:(uint16_t)id;
///
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didReceiveMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
///
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didSubscribeTopics:(NSDictionary * _Nonnull)success failed:(NSArray<NSString *> * _Nonnull)failed;
///
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didUnsubscribeTopics:(NSArray<NSString *> * _Nonnull)topics;
///
- (void)mqttDidPing:(CocoaMQTT * _Nonnull)mqtt;
///
- (void)mqttDidReceivePong:(CocoaMQTT * _Nonnull)mqtt;
///
- (void)mqttDidDisconnect:(CocoaMQTT * _Nonnull)mqtt withError:(NSError * _Nullable)err;
@optional
/// Manually validate SSL/TLS server certificate.
/// This method will be called if enable  <code>allowUntrustCACertificate</code>
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didReceive:(SecTrustRef _Nonnull)trust completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)mqttUrlSession:(CocoaMQTT * _Nonnull)mqtt didReceiveTrust:(SecTrustRef _Nonnull)trust didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
///
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishComplete:(uint16_t)id;
///
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didStateChangeTo:(enum CocoaMQTTConnState)state;
@end


SWIFT_CLASS("_TtC9CocoaMQTT15CocoaMQTTLogger")
@interface CocoaMQTTLogger : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// MQTT Message
SWIFT_CLASS("_TtC9CocoaMQTT16CocoaMQTTMessage")
@interface CocoaMQTTMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface CocoaMQTTMessage (SWIFT_EXTENSION(CocoaMQTT))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


typedef SWIFT_ENUM(uint8_t, CocoaMQTTPUBACKReasonCode, closed) {
  CocoaMQTTPUBACKReasonCodeSuccess = 0x00,
  CocoaMQTTPUBACKReasonCodeNoMatchingSubscribers = 0x10,
  CocoaMQTTPUBACKReasonCodeUnspecifiedError = 0x80,
  CocoaMQTTPUBACKReasonCodeImplementationSpecificError = 0x83,
  CocoaMQTTPUBACKReasonCodeNotAuthorized = 0x87,
  CocoaMQTTPUBACKReasonCodeTopicNameInvalid = 0x90,
  CocoaMQTTPUBACKReasonCodePacketIdentifierInUse = 0x91,
  CocoaMQTTPUBACKReasonCodeQuotaExceeded = 0x97,
  CocoaMQTTPUBACKReasonCodePayloadFormatInvalid = 0x99,
};

typedef SWIFT_ENUM(uint8_t, CocoaMQTTPUBCOMPReasonCode, closed) {
  CocoaMQTTPUBCOMPReasonCodeSuccess = 0x00,
  CocoaMQTTPUBCOMPReasonCodePacketIdentifierNotFound = 0x92,
};

typedef SWIFT_ENUM(uint8_t, CocoaMQTTPUBRECReasonCode, closed) {
  CocoaMQTTPUBRECReasonCodeSuccess = 0x00,
  CocoaMQTTPUBRECReasonCodeNoMatchingSubscribers = 0x10,
  CocoaMQTTPUBRECReasonCodeUnspecifiedError = 0x80,
  CocoaMQTTPUBRECReasonCodeImplementationSpecificError = 0x83,
  CocoaMQTTPUBRECReasonCodeNotAuthorized = 0x87,
  CocoaMQTTPUBRECReasonCodeTopicNameInvalid = 0x90,
  CocoaMQTTPUBRECReasonCodePacketIdentifierInUse = 0x91,
  CocoaMQTTPUBRECReasonCodeQuotaExceeded = 0x97,
  CocoaMQTTPUBRECReasonCodePayloadFormatInvalid = 0x99,
};

typedef SWIFT_ENUM(uint8_t, CocoaMQTTPUBRELReasonCode, closed) {
  CocoaMQTTPUBRELReasonCodeSuccess = 0x00,
  CocoaMQTTPUBRELReasonCodePacketIdentifierNotFound = 0x92,
};

/// Quality of Service levels
typedef SWIFT_ENUM(uint8_t, CocoaMQTTQoS, closed) {
/// At most once delivery
  CocoaMQTTQoSQos0 = 0,
/// At least once delivery
  CocoaMQTTQoSQos1 = 1,
/// Exactly once delivery
  CocoaMQTTQoSQos2 = 2,
/// !!! Used SUBACK frame only
  CocoaMQTTQoSFAILURE = 0x80,
};

typedef SWIFT_ENUM(uint8_t, CocoaMQTTSUBACKReasonCode, closed) {
  CocoaMQTTSUBACKReasonCodeGrantedQoS0 = 0x00,
  CocoaMQTTSUBACKReasonCodeGrantedQoS1 = 0x01,
  CocoaMQTTSUBACKReasonCodeGrantedQoS2 = 0x02,
  CocoaMQTTSUBACKReasonCodeUnspecifiedError = 0x80,
  CocoaMQTTSUBACKReasonCodeImplementationSpecificError = 0x83,
  CocoaMQTTSUBACKReasonCodeNotAuthorized = 0x87,
  CocoaMQTTSUBACKReasonCodeTopicFilterInvalid = 0x8F,
  CocoaMQTTSUBACKReasonCodePacketIdentifierInUse = 0x91,
  CocoaMQTTSUBACKReasonCodeQuotaExceeded = 0x97,
  CocoaMQTTSUBACKReasonCodeSharedSubscriptionsNotSupported = 0x9E,
  CocoaMQTTSUBACKReasonCodeSubscriptionIdentifiersNotSupported = 0xA1,
  CocoaMQTTSUBACKReasonCodeWildcardSubscriptionsNotSupported = 0xA2,
};


SWIFT_CLASS("_TtC9CocoaMQTT15CocoaMQTTSocket")
@interface CocoaMQTTSocket : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MGCDAsyncSocket;
@class NSData;

@interface CocoaMQTTSocket (SWIFT_EXTENSION(CocoaMQTT)) <MGCDAsyncSocketDelegate>
- (void)socket:(MGCDAsyncSocket * _Nonnull)sock didConnectToHost:(NSString * _Nonnull)host port:(uint16_t)port;
- (void)socket:(MGCDAsyncSocket * _Nonnull)sock didReceiveTrust:(SecTrustRef _Nonnull)trust completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)socketDidSecure:(MGCDAsyncSocket * _Nonnull)sock;
- (void)socket:(MGCDAsyncSocket * _Nonnull)sock didWriteDataWithTag:(NSInteger)tag;
- (void)socket:(MGCDAsyncSocket * _Nonnull)sock didReadData:(NSData * _Nonnull)data withTag:(NSInteger)tag;
- (void)socketDidDisconnect:(MGCDAsyncSocket * _Nonnull)sock withError:(NSError * _Nullable)err;
@end


typedef SWIFT_ENUM(uint8_t, CocoaMQTTUNSUBACKReasonCode, closed) {
  CocoaMQTTUNSUBACKReasonCodeSuccess = 0x00,
  CocoaMQTTUNSUBACKReasonCodeNoSubscriptionExisted = 0x11,
  CocoaMQTTUNSUBACKReasonCodeUnspecifiedError = 0x80,
  CocoaMQTTUNSUBACKReasonCodeImplementationSpecificError = 0x83,
  CocoaMQTTUNSUBACKReasonCodeNotAuthorized = 0x87,
  CocoaMQTTUNSUBACKReasonCodeTopicFilterInvalid = 0x8F,
  CocoaMQTTUNSUBACKReasonCodePacketIdentifierInUse = 0x91,
};

typedef SWIFT_ENUM(uint8_t, CocoaRetainHandlingOption, closed) {
  CocoaRetainHandlingOptionSendOnSubscribe = 0,
  CocoaRetainHandlingOptionSendOnlyWhenSubscribeIsNew = 1,
  CocoaRetainHandlingOptionNone = 2,
};


SWIFT_CLASS("_TtCC9CocoaMQTT18CocoaMQTTWebSocket20FoundationConnection")
@interface FoundationConnection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLSession;
@class NSURLSessionTask;
@class NSURLSessionWebSocketTask;

SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(watchos,introduced=6.0) SWIFT_AVAILABILITY(ios,introduced=13.0) SWIFT_AVAILABILITY(macos,introduced=10.15)
@interface FoundationConnection (SWIFT_EXTENSION(CocoaMQTT)) <NSURLSessionWebSocketDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didOpenWithProtocol:(NSString * _Nullable)protocol;
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didCloseWithCode:(NSURLSessionWebSocketCloseCode)closeCode reason:(NSData * _Nullable)reason;
@end


SWIFT_CLASS("_TtC9CocoaMQTT18MqttAuthProperties")
@interface MqttAuthProperties : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT21MqttConnectProperties")
@interface MqttConnectProperties : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT17MqttDecodeConnAck")
@interface MqttDecodeConnAck : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT16MqttDecodePubAck")
@interface MqttDecodePubAck : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT17MqttDecodePubComp")
@interface MqttDecodePubComp : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT16MqttDecodePubRec")
@interface MqttDecodePubRec : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT16MqttDecodePubRel")
@interface MqttDecodePubRel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT17MqttDecodePublish")
@interface MqttDecodePublish : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT16MqttDecodeSubAck")
@interface MqttDecodeSubAck : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT18MqttDecodeUnsubAck")
@interface MqttDecodeUnsubAck : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CocoaMQTT21MqttPublishProperties")
@interface MqttPublishProperties : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint8_t, PayloadFormatIndicator, closed) {
  PayloadFormatIndicatorUnspecified = 0x00,
  PayloadFormatIndicatorUtf8 = 0x01,
};



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
