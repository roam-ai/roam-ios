// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RoamMQTTConnector
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CocoaMQTT
import CoreData
import CoreLocation
import Foundation
import Roam
@_exported import RoamMQTTConnector
import Swift
import UserNotifications
import _Concurrency
import _StringProcessing
@objc public enum RoamMqttConnectionType : Swift.Int {
  case TCP
  case WS
  case WSS
  case SSL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RoamConnector {
  @objc var clientID: Swift.String { get }
}
@objc public protocol RoamMQTTDelegate {
  @objc optional func didChangeMQTTStatus(_ status: Swift.String)
}
@_hasMissingDesignatedInitializers @objc public class RoamMqttConnector : ObjectiveC.NSObject, RoamConnector {
  @objc public var clientID: Swift.String
  @objc public class Builder : ObjectiveC.NSObject {
    public init(host: Swift.String, port: Swift.UInt16, connectionType: RoamMqttConnectionType, topic: Swift.String)
    public func setPath(_ path: Swift.String) -> RoamMqttConnector.Builder
    public func setCredentials(username: Swift.String, password: Swift.String) -> RoamMqttConnector.Builder
    public func setClientId(_ clientId: Swift.String) -> RoamMqttConnector.Builder
    public func setQos(_ qos: Swift.Int) -> RoamMqttConnector.Builder
    public func setConnectOptions(_ connectOptions: RoamMqttConnectOptions) -> RoamMqttConnector.Builder
    public func setWillOption(_ willOption: RoamMqttWillOptions) -> RoamMqttConnector.Builder
    public func setMQTTVersion(_ version: Swift.String) -> RoamMqttConnector.Builder
    public func build() -> RoamMqttConnector
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RoamMQTTConnector : ObjectiveC.NSObject {
  @objc public static var delegate: RoamMQTTDelegate! {
    @objc get
    @objc set
  }
  @objc public static func registerConnector(_ connector: RoamConnector)
  @objc public static func deRegisterConnector()
  @objc override dynamic public init()
  @objc deinit
}
extension RoamMQTTConnector : LocationSubscriber {
  @objc dynamic public func receiveLocationUpdate(location: CoreLocation.CLLocation, dictionary: [Swift.String : Any])
  @objc dynamic public func connect()
  @objc dynamic public func disconnect()
}
@objc public class RoamMqttWillOptions : ObjectiveC.NSObject {
  public init(willTopic: Swift.String, willPayload: Swift.String, willQos: Swift.Int, retain: Swift.Bool)
  @objc deinit
}
@objc public class RoamMqttConnectOptions : ObjectiveC.NSObject {
  public init(keepAliveInterval: Swift.UInt16, cleanSession: Swift.Bool, connectionTimeout: Swift.Double, autoReconnect: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MqttConnectorLocationData) public class MqttConnectorLocationData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MqttConnectorLocationData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MqttConnectorLocationData>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var client_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gps_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontal_accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isOfflineData: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mqttLocation_time: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var network_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tracking_mode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vertical_accuracy: Swift.Double {
    @objc get
    @objc set
  }
}
extension RoamMqttConnectionType : Swift.Equatable {}
extension RoamMqttConnectionType : Swift.Hashable {}
extension RoamMqttConnectionType : Swift.RawRepresentable {}
