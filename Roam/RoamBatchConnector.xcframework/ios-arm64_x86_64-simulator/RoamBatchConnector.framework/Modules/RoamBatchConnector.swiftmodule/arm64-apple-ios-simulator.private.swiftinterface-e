// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RoamBatchConnector
import CoreData
import CoreLocation
import Foundation
import Roam
@_exported import RoamBatchConnector
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamBatchProcessor : ObjectiveC.NSObject {
  @objc public static let shared: RoamBatchProcessor
  @objc public func initialize()
  @objc public func setConfig(enable: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BatchLocationModel) public class BatchLocationModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BatchLocationModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BatchLocationModel>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_context: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_details: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_saver: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_manufacturer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_model: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_listener: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geofence_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gps_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontal_accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_authorization_status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_listener: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadata: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nearby_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var network_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var os_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var publish_only: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdk_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tracking_mode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trips_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tz_offset: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vertical_accuracy: Swift.Double {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(CSVFilesDataModel) public class CSVFilesDataModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CSVFilesDataModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CSVFilesDataModel>
  @objc @NSManaged dynamic public var filename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var filepath: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locationcount: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
}
