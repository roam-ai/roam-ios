// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RoamBatchConnector
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreData
import CoreLocation
import Foundation
import Roam
@_exported import RoamBatchConnector
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class RoamBatchPublish : ObjectiveC.NSObject {
  @objc public var trackingMode: Swift.Bool
  @objc public var latitude: Swift.Bool
  @objc public var longitude: Swift.Bool
  @objc public var speed: Swift.Bool
  @objc public var altitude: Swift.Bool
  @objc public var course: Swift.Bool
  @objc public var horizontalAccuracy: Swift.Bool
  @objc public var verticalAccuracy: Swift.Bool
  @objc public var activity: Swift.Bool
  @objc public var appContext: Swift.Bool
  @objc public var recordedAt: Swift.Bool
  @objc public var tzOffset: Swift.Bool
  @objc public var batteryStatus: Swift.Bool
  @objc public var batteryRemaining: Swift.Bool
  @objc public var batterySaver: Swift.Bool
  @objc public var networkStatus: Swift.Bool
  @objc public var networkType: Swift.Bool
  @objc public var networkState: Swift.Bool
  @objc public var locationPermission: Swift.Bool
  @objc public var gpsStatus: Swift.Bool
  @objc public var deviceModel: Swift.Bool
  @objc public var deviceManufacturer: Swift.Bool
  @objc public var deviceName: Swift.Bool
  @objc public var kernelVersion: Swift.Bool
  @objc public var ipAddress: Swift.Bool
  @objc public var publicIpAddress: Swift.Bool
  @objc public var wifiSSID: Swift.Bool
  @objc public var localeCountry: Swift.Bool
  @objc public var localeLanguage: Swift.Bool
  @objc public var carrierName: Swift.Bool
  @objc public var appName: Swift.Bool
  @objc public var appInstallationDate: Swift.Bool
  @objc public var appVersion: Swift.Bool
  @objc public var systemName: Swift.Bool
  @objc public var centroid: Swift.Bool
  @objc public var metadata: Swift.Bool
  @objc public var sdkVersion: Swift.Bool
  @objc public var locationId: Swift.Bool
  @objc public var userId: Swift.Bool
  @objc public var appId: Swift.Bool
  @objc public var osVersion: Swift.Bool
  @objc public var idfv: Swift.Bool
  @objc public var idfa: Swift.Bool
  @objc public var source: Swift.Bool
  @objc public var bundleId: Swift.Bool
  @objc public var locationListener: Swift.Bool
  @objc public var locationAuthorizationStatus: Swift.Bool
  @objc public var nearbyEvents: Swift.Bool
  @objc public var appDetails: Swift.Bool
  @objc public var geofenceEvents: Swift.Bool
  @objc public var tripsEvents: Swift.Bool
  @objc public var locationEvents: Swift.Bool
  @objc public var publishOnly: Swift.Bool
  @objc public var eventListener: Swift.Bool
  @objc public func enableAll()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamBatch : ObjectiveC.NSObject {
  @objc public static let shared: RoamBatch
  @objc public func initialize()
  @objc public func setConfig(enable: Swift.Bool, syncHour: Foundation.NSNumber? = nil, publish: RoamBatchPublish)
  @objc public func enableLogging()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BatchLocationModel) public class BatchLocationModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BatchLocationModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BatchLocationModel>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_context: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_details: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_installation_date: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_saver: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bundle_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var carrier_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroid: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_manufacturer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_model: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_listener: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geofence_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gps_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontal_accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idfa: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idfv: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ip_address: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var kernel_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locale_country: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locale_language: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_authorization_status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_listener: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadata: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nearby_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var network_state: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var network_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var network_type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var os_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var public_ip_address: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var publish_only: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdk_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var system_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tracking_mode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trips_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tz_offset: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vertical_accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wifi_ssid: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(CSVFilesDataModel) public class CSVFilesDataModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CSVFilesDataModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CSVFilesDataModel>
  @objc @NSManaged dynamic public var filename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var filepath: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locationcount: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
}
